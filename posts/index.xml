<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Erica On The Way</title>
    <link>http://erica-zhou.github.io/posts/</link>
    <description>Recent content in Posts on Erica On The Way</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright (c) 2008 - 2015, Erica Zhou; all rights reserved.</copyright>
    <lastBuildDate>Sun, 16 Aug 2015 23:04:24 +0800</lastBuildDate>
    <atom:link href="http://erica-zhou.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用 git hook 搭建自动编译部署测试环境</title>
      <link>http://erica-zhou.github.io/posts/put_up_dev_env/</link>
      <pubDate>Sun, 16 Aug 2015 23:04:24 +0800</pubDate>
      
      <guid>http://erica-zhou.github.io/posts/put_up_dev_env/</guid>
      <description>

&lt;h3 id=&#34;说明:62a450c8c89780770128cbd5f887c201&#34;&gt;说明：&lt;/h3&gt;

&lt;p&gt;利用 docker，git 搭建自动编译部署测试环境
&lt;strong&gt;步骤：&lt;/strong&gt;
1. 在 &lt;code&gt;dev_server&lt;/code&gt;上 搭建测试环境
2. 创建在 &lt;code&gt;ci_server&lt;/code&gt;代码远端仓库 &lt;code&gt;test_repo&lt;/code&gt;
3. 在远端仓库中添加 post-recieve hook
3. 在开发机上本地仓库上新添加一个远程仓库指向的远端仓库&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;
&lt;code&gt;dev_server&lt;/code&gt;和 &lt;code&gt;ci_server&lt;/code&gt;都是docker container&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用说明：&lt;/strong&gt;
每次 commit 后
1. 在测试服务器上自动编译
2. 在测试服务器上自动部署&lt;/p&gt;

&lt;h2 id=&#34;步骤说明:62a450c8c89780770128cbd5f887c201&#34;&gt;步骤说明&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;创建&lt;code&gt;dev_server&lt;/code&gt;搭建测试环境：&lt;/li&gt;
&lt;li&gt;新建一个 container将程序能正常运行 的环境全部部署好，然后将该 container 保存为image，&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建相关的 Dockfile
创建 Dockfile 并不是一个必须的步骤，但是创建测试环境的 Dockfile，并保存，能让开发人员在换了测试服务器（非&lt;code&gt;dev_server&lt;/code&gt;）后能快速的搭建测试环境而不需要重新搭建&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新建一个&lt;code&gt;ci_server&lt;/code&gt; container&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新运行一个 container 名为&lt;code&gt;ci_server&lt;/code&gt;，需要将&lt;code&gt;ci_server&lt;/code&gt; 的端口22 映射到宿主机&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装运行ssh&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置好程序编译环境&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装git&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建远端仓库：在&lt;code&gt;test_repo&lt;/code&gt;目录下执行 &lt;code&gt;git init --bare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将开发机上的需要测试代码分支推到远端仓库后，在 &lt;code&gt;test_src&lt;/code&gt;目录下执行&lt;code&gt;git clone $test_repo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置自动编译部署脚本，在远端仓库中添加 post-recieve hook，hook 包括3部分&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pull 刚刚提交的代码&lt;/li&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;li&gt;部署测试环境
&lt;strong&gt;注意：&lt;/strong&gt;
在 hook 中，GIT_DIR 的值被设置为&lt;code&gt;.&lt;/code&gt;,因此在使用 git 命令前可以删除这个变量，或者将它设置为你需要的的值&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料:62a450c8c89780770128cbd5f887c201&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tuicool.com/articles/3QRB7jU&#34;&gt;在测试服务器上建立代码的远程仓库&amp;amp;代码仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/docs/githooks&#34;&gt;添加 post_recieve hook&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;container 中安装 ssh：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ yum install openssh-server 
	$ echo root:sshpass | chpasswd
	$ sed &#39;s@session\s*required\s*pam_loginuid.so@session optional 	pam_loginuid.so@g&#39; -i /etc/pam.d/sshd
	$ /etc/init.d/sshd start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将&lt;code&gt;ci_server&lt;/code&gt;的ssh端口（22）映射的宿主机时，一般无法映射到相同的22端口上，因此开发机的本地仓库添加&lt;code&gt;ci_server&lt;/code&gt;远端仓库时，需要指定端口号，方法如下： &lt;code&gt;ssh://git@github.com:22/asdf/asdf.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySQL调整参数:open_files_limit &amp; max_connections &amp; table_open_cache</title>
      <link>http://erica-zhou.github.io/posts/mysql_variables/</link>
      <pubDate>Sat, 06 Jun 2015 11:10:08 +0800</pubDate>
      
      <guid>http://erica-zhou.github.io/posts/mysql_variables/</guid>
      <description>

&lt;h2 id=&#34;起因:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;非root用户运行MySQL，当MySQL配置比较高时，MySQL运行中生效的参数值与配置的值不一样,所以具体分析一下MySQL是怎么调整这些参数值的。
所以这篇文章的目的是为了说明在系统资源不够的情况下，MySQL 是怎么调整者三个参数的&lt;/p&gt;

&lt;h3 id=&#34;说明:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;说明&lt;/h3&gt;

&lt;p&gt;此文涉及到3个参数open_files_limit &amp;amp; max_connections &amp;amp; table_open_cache，这3个参数与系统相关的资源是最多能同时打开的文件（ulimit -n 查看）实际即文件描述符（fd）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;系统参数与文件描述符的关系&lt;/strong&gt;
- max_connection &amp;amp; fd : 每一个MySQL connection都需要一个文件描述符
- table_open_cache &amp;amp;  fd 打开一张表至少需要一个文件描述符，如打开MyISAM需要两个fd&lt;/p&gt;

&lt;h2 id=&#34;mysql调整参数的方式:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;MySQL调整参数的方式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;根据配置(配置的3个参数值或默认值)计算&lt;code&gt;request_open_files(需要的文件描述符)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取有效的系统的限制值&lt;code&gt;effective_open_files&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据&lt;code&gt;effective_open_files&lt;/code&gt;调整&lt;code&gt;request_open_files&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据调整后的&lt;code&gt;request_open_files&lt;/code&gt;,计算实际生效的参数值(show variables 查看到的3个参数值)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;计算-request-open-files:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;计算&lt;code&gt;request_open_files&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;request_open_files&lt;/code&gt;有三个计算公式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // 最大连接数+同时打开的表的最大数量+其他（各种日志等等）
      limit_1= max_connections + table_cache_size * 2 + 10;
    
     //假设平均每个连接打开的表的数量（2-4）
     //源码中是这么写的：
     //We are trying to allocate no less than  
     //	max_connections*5 file handles 
      limit_2= max_connections * 5;
    
      //mysql 默认的最低值是5000
      limit_3= open_files_limit ? open_files_limit : 5000;

所以open_files_limit期待的最低 
    request_open_files= max(limit_1, limit_2,limit_3);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;计算-effective-open-files:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;计算&lt;code&gt;effective_open_files&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;MySQL 的思路：
在&lt;strong&gt;有限值&lt;/strong&gt;的的范围内MySQL &lt;strong&gt;尽量&lt;/strong&gt;将&lt;code&gt;effective_open_files&lt;/code&gt;的值设大&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/2.png&#34; alt=&#34;ddd&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;修正request-open-files:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;修正request_open_files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;requested_open_files&lt;/code&gt;= min(&lt;code&gt;effective_open_files&lt;/code&gt;, &lt;code&gt;request_open_files&lt;/code&gt;);&lt;/p&gt;

&lt;h3 id=&#34;重新计算参数值:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;重新计算参数值&lt;/h3&gt;

&lt;h3 id=&#34;修正open-files-limit:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;修正open_files_limit&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;open_files_limit&lt;/code&gt; = &lt;code&gt;effective_open_files&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;修正max-connections:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;修正max_connections&lt;/h3&gt;

&lt;p&gt;max_connections 根据 request_open_files 来做修正。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;limit = requested_open_files - 10 - TABLE_OPEN_CACHE_MIN * 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果配置的max_connections值大于limit，则将 max_connections 的值修正为limit&lt;/li&gt;
&lt;li&gt;其他情况下 max_connections 保留配置值&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;修正table-cache-size:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;修正table_cache_size&lt;/h3&gt;

&lt;p&gt;table_cache_size 会根据 request_open_files 来做修正&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// mysql table_cache_size 最小值，400
limit1 = TABLE_OPEN_CACHE_MIN 
// 根据 requested_open_files 计算
limit2 = (requested_open_files - 10 - max_connections) / 2
limit = max(limit1,limt2);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果配置的 table_cache_size 值大于limit，则将 table_cache_size 的值修正为limit&lt;/li&gt;
&lt;li&gt;其他情况下 table_cache_size 保留配置值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;举例:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;举例&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;以下用例全部在非 root 用户下运行&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;系统资源不够且无法调整
```
参数设置：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//mysql
	max_connections = 1000
//ulimit -n
	1024&lt;/p&gt;

&lt;p&gt;生效的值：&lt;/p&gt;

&lt;p&gt;open_files_limit = 1024
max_connections = 1024 - 10 - 800 = 214
table_open_cache = ( 1024 - 10 - 214) / 2 = 400&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
---
- 系统资源不够可以调整
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数设置：&lt;/p&gt;

&lt;p&gt;//mysql
	max_connections = 1000
//ulimit -S -n
	1000
//ulimit -H -n
	65535&lt;/p&gt;

&lt;p&gt;生效的值：&lt;/p&gt;

&lt;p&gt;open_files_limit = 65535
max_connections = 1000
table_open_cache = ( 1024 - 10 - 214) / 2 = 400&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
---
mysql 修改 open_files_limit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数设置：&lt;/p&gt;

&lt;p&gt;//mysql
	max_connections = 1000
	max_connections = 1000
//ulimit -n
	65535&lt;/p&gt;

&lt;p&gt;生效的值：&lt;/p&gt;

&lt;p&gt;open_files_limit = 65535
max_connections = 1000
table_open_cache = 2000
```&lt;/p&gt;

&lt;h2 id=&#34;其它:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;淘宝数据库内核月报中说道的相关内容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mysql.taobao.org//monthly/2015/08/07/&#34;&gt;MySQL · 答疑解惑 · open file limits&lt;/a&gt;
这篇主要讲的是，MySQL 在执行哪些操作时会执行打开文件的操作&lt;/p&gt;

&lt;h2 id=&#34;附注:ff1a89ac228b92df24d68eae2d0babea&#34;&gt;附注&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sudops.com/mysql-open-file-limit-max_connections-table-open-cache.htmlz&#34;&gt;1&lt;/a&gt; . 非root用户，只能设置Hard limit之内的值，root用户可以设置hard limit的值
[2] .&lt;a href=&#34;http://www.sudops.com/mysql-open-file-limit-max_connections-table-open-cache.htmlz&#34;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysqlsandbox 的安装与使用</title>
      <link>http://erica-zhou.github.io/posts/mysql-sandbox/</link>
      <pubDate>Sat, 06 Jun 2015 11:10:08 +0800</pubDate>
      
      <guid>http://erica-zhou.github.io/posts/mysql-sandbox/</guid>
      <description>&lt;p&gt;官网：&lt;a href=&#34;http://mysqlsandbox.net/&#34;&gt;http://mysqlsandbox.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用途：&lt;/p&gt;

&lt;p&gt;方便快捷迅速的在一台机器上搭建 mysql 实例，包括：单个 mysql 实例，主从复制的 mysql 实例，和mysql 多实例，对于测试非常方便
具体安装使用请参照官网，在使用时碰到了两个问题，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Can&amp;rsquo;t locate ExtUtils/MakeMaker.pm in @INC&lt;/p&gt;

&lt;p&gt;解决办法：&lt;code&gt;yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用异常，不论是执行 &lt;code&gt;make_replication_sandbox&lt;/code&gt;，还是&lt;code&gt;make_replication_sandbox&lt;/code&gt; 都提示以下信息：
&amp;gt; Use of uninitialized value $ENV{&amp;ldquo;USER&amp;rdquo;} in concatenation (.) or string at /usr/local/share/perl5/MySQL/Sandbox/Scripts.pm line 68.
installing and starting master&lt;/p&gt;

&lt;p&gt;解决方法：设置环境变量 USER&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hello world !</title>
      <link>http://erica-zhou.github.io/posts/Hello%20world%21%21%21/</link>
      <pubDate>Sun, 25 Jan 2015 19:13:59 +0800</pubDate>
      
      <guid>http://erica-zhou.github.io/posts/Hello%20world%21%21%21/</guid>
      <description>

&lt;h1 id=&#34;hello-world:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Hello world !&lt;/h1&gt;

&lt;h1 id=&#34;welcome:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Welcome!&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>